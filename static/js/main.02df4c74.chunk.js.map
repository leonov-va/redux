{"version":3,"sources":["services/PostService.ts","components/PostItem.tsx","components/PostContainer.tsx","hooks/redux.ts","store/reducers/ActionCreators.ts","App.tsx","store/reducers/UserSlice.ts","store/store.ts","index.tsx"],"names":["postAPI","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","build","fetchAllPosts","query","limit","url","params","_limit","PostItem","React","memo","post","className","id","title","body","type","PostContainer","props","useFetchAllPostsQuery","posts","data","isLoading","error","style","color","map","useAppSelector","useSelector","fetchUsers","createAsyncThunk","_","thunkAPI","a","axios","get","response","rejectWithValue","App","dispatch","useDispatch","state","userReducer","users","useEffect","JSON","parse","stringify","user","name","href","email","userSlice","createSlice","initialState","reducers","extraReducers","fulfilled","action","payload","pending","rejected","rootReducer","combineReducers","reducer","store","configureStore","middleware","getDefaultMiddleware","concat","ReactDOM","render","document","getElementById"],"mappings":"kOAGaA,EAAUC,oBAAU,CAC/BC,YAAa,UACbC,UAAWC,yBAAe,CACxBC,QAAS,0CAEXC,UAAW,SAACC,GAAD,MAAY,CACrBC,cAAeD,EAAME,MAAuB,CAC1CA,MAAO,eAACC,EAAD,uDAAiB,EAAjB,MAAwB,CAC7BC,IAAI,SACJC,OAAQ,CACNC,OAAQH,W,OCOHI,EAb2BC,IAAMC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACtD,OACE,0BAASC,UAAU,OAAnB,UACE,sBAAMA,UAAU,WAAhB,SAA4BD,EAAKE,KACjC,oBAAID,UAAU,aAAd,SAA4BD,EAAKG,QACjC,mBAAGF,UAAU,aAAb,SAA2BD,EAAKI,OAChC,wBAAQH,UAAU,eAAeI,KAAK,SAAtC,0BCMSC,EAfiB,SAACC,GAC/B,MAA0CxB,EAAQyB,sBAAsB,IAA1DC,EAAd,EAAQC,KAAaC,EAArB,EAAqBA,UAAWC,EAAhC,EAAgCA,MAEhC,OACE,sBAAKX,UAAU,QAAf,UACGU,GAAa,6CACbC,GAAS,oBAAIC,MAAO,CAAEC,MAAO,OAApB,SAA8BF,IAF1C,OAIGH,QAJH,IAIGA,OAJH,EAIGA,EAAOM,KAAI,SAACf,GAAD,OACV,cAAC,EAAD,CAAwBA,KAAMA,GAAfA,EAAKE,WCRfc,EAAkDC,c,iDCWlDC,EAAaC,2BACxB,gBADwC,uCAExC,WAAOC,EAAGC,GAAV,eAAAC,EAAA,+EAE2BC,IAAMC,IAC3B,8CAHN,cAEUC,EAFV,yBAKWA,EAASf,MALpB,yDAOWW,EAASK,gBAAgB,0BAPpC,yDAFwC,yDCuB3BC,I,EAAAA,EAhCf,WACE,IAAMC,EFL4BC,wBEMlC,EAAoCb,GAClC,SAACc,GAAD,OAAWA,EAAMC,eADXC,EAAR,EAAQA,MAAOrB,EAAf,EAAeA,UAAWC,EAA1B,EAA0BA,MAQ1B,OAJAqB,qBAAU,WACRL,EAASV,OACR,IAGD,sBAAKjB,UAAU,MAAf,UACE,uCACCU,GAAa,6CACbC,GAAS,oBAAIC,MAAO,CAAEC,MAAO,OAApB,SAA8BF,IACxC,qBAAKX,UAAU,QAAf,SACGiC,KAAKC,MAAMD,KAAKE,UAAUJ,EAAO,KAAM,IAAIjB,KAAI,SAACsB,GAAD,OAC9C,0BAASpC,UAAU,OAAnB,UACE,oBAAIA,UAAU,aAAd,SAA4BoC,EAAKC,OACjC,mBAAGrC,UAAU,cAAcsC,KAAI,iBAAYF,EAAKG,OAAhD,SACGH,EAAKG,UAHqBH,EAAKnC,SASxC,uCACA,cAAC,EAAD,Q,sBCESuC,EApBUC,sBAAY,CACnCJ,KAAM,OACNK,aAR8B,CAC9BX,MAAO,GACPrB,WAAW,EACXC,MAAO,IAMPgC,SAAU,GACVC,eAAa,mBACV3B,EAAW4B,UAAUzC,MAAO,SAACyB,EAAOiB,GACnCjB,EAAMnB,WAAY,EAClBmB,EAAMlB,MAAQ,GACdkB,EAAME,MAAQe,EAAOC,WAJZ,cAMV9B,EAAW+B,QAAQ5C,MAAO,SAACyB,GAC1BA,EAAMnB,WAAY,KAPT,cASVO,EAAWgC,SAAS7C,MAAO,SAACyB,EAAOiB,GAClCjB,EAAMnB,WAAY,EAClBmB,EAAMlB,MAAQmC,EAAOC,WAXZ,KAgBf,QChCMG,EAAcC,YAAgB,aAClCrB,eACChD,EAAQE,YAAcF,EAAQsE,UCC3BC,EDGGC,yBAAe,CACpBF,QAASF,EACTK,WAAY,SAACC,GAAD,OACVA,IAAuBC,OAAO3E,EAAQyE,eCJ5CG,IAASC,OACP,cAAC,WAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,W","file":"static/js/main.02df4c74.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nimport { IPost } from \"../models/IPost\";\n\nexport const postAPI = createApi({\n  reducerPath: \"postAPI\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"https://jsonplaceholder.typicode.com/\",\n  }),\n  endpoints: (build) => ({\n    fetchAllPosts: build.query<IPost[], number>({\n      query: (limit: number = 5) => ({\n        url: `/posts`,\n        params: {\n          _limit: limit,\n        },\n      }),\n    }),\n  }),\n});\n","import React from \"react\";\nimport { IPost } from \"../models/IPost\";\n\ninterface PostItemProps {\n  post: IPost;\n}\n\nconst PostItem: React.FC<PostItemProps> = React.memo(({ post }) => {\n  return (\n    <article className=\"post\">\n      <span className=\"post__id\">{post.id}</span>\n      <h2 className=\"post__name\">{post.title}</h2>\n      <p className=\"post__text\">{post.body}</p>\n      <button className=\"post__delete\" type=\"button\">\n        Delete\n      </button>\n    </article>\n  );\n});\n\nexport default PostItem;\n","import React from \"react\";\nimport { postAPI } from \"../services/PostService\";\nimport PostItem from \"./PostItem\";\n\nconst PostContainer: React.FC = (props) => {\n  const { data: posts, isLoading, error } = postAPI.useFetchAllPostsQuery(10);\n\n  return (\n    <div className=\"posts\">\n      {isLoading && <h1>Loading....</h1>}\n      {error && <h1 style={{ color: \"red\" }}>{error}</h1>}\n\n      {posts?.map((post) => (\n        <PostItem key={post.id} post={post} />\n      ))}\n    </div>\n  );\n};\n\nexport default PostContainer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch, RootState } from \"../store/store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { IUser } from \"../../models/IUser\";\n\n// export const fetchUsers = () => async (dispatch: AppDispatch) => {\n//   try {\n//     dispatch(userSlice.actions.usersFetching());\n//     const response = await axios.get<IUser[]>(\n//       \"https://jsonplaceholder.typicode.com/users\"\n//     );\n//     dispatch(userSlice.actions.usersFetchingSuccess(response.data));\n//   } catch (e: any) {\n//     dispatch(userSlice.actions.usersFetchingError(e.message));\n//   }\n// };\n\nexport const fetchUsers = createAsyncThunk(\n  \"user/fetchAll\",\n  async (_, thunkAPI) => {\n    try {\n      const response = await axios.get<IUser[]>(\n        \"https://jsonplaceholder.typicode.com/users\"\n      );\n      return response.data;\n    } catch (e: any) {\n      return thunkAPI.rejectWithValue(\"Failed to load users!\");\n    }\n  }\n);\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport PostContainer from \"./components/PostContainer\";\nimport { useAppDispatch, useAppSelector } from \"./hooks/redux\";\nimport { IUser } from \"./models/IUser\";\nimport { fetchUsers } from \"./store/reducers/ActionCreators\";\n\nfunction App() {\n  const dispatch = useAppDispatch();\n  const { users, isLoading, error } = useAppSelector(\n    (state) => state.userReducer\n  );\n\n  useEffect(() => {\n    dispatch(fetchUsers());\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Users</h1>\n      {isLoading && <h1>Loading....</h1>}\n      {error && <h1 style={{ color: \"red\" }}>{error}</h1>}\n      <div className=\"users\">\n        {JSON.parse(JSON.stringify(users, null, 2)).map((user: IUser) => (\n          <article className=\"user\" key={user.id}>\n            <h2 className=\"user__name\">{user.name}</h2>\n            <a className=\"user__email\" href={`mailto:${user.email}`}>\n              {user.email}\n            </a>\n          </article>\n        ))}\n      </div>\n\n      <h1>Posts</h1>\n      <PostContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import { fetchUsers } from \"./ActionCreators\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { IUser } from \"../../models/IUser\";\n\ninterface UserState {\n  users: IUser[];\n  isLoading: boolean;\n  error: string;\n}\n\nconst initialState: UserState = {\n  users: [],\n  isLoading: false,\n  error: \"\",\n};\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchUsers.fulfilled.type]: (state, action: PayloadAction<IUser[]>) => {\n      state.isLoading = false;\n      state.error = \"\";\n      state.users = action.payload;\n    },\n    [fetchUsers.pending.type]: (state) => {\n      state.isLoading = true;\n    },\n    [fetchUsers.rejected.type]: (state, action: PayloadAction<string>) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n  },\n});\n\nexport default userSlice.reducer;\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport { postAPI } from \"../services/PostService\";\nimport userReducer from \"./reducers/UserSlice\";\n\nconst rootReducer = combineReducers({\n  userReducer,\n  [postAPI.reducerPath]: postAPI.reducer,\n});\n\nexport const setupStore = () => {\n  return configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware().concat(postAPI.middleware),\n  });\n};\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppStore = ReturnType<typeof setupStore>;\nexport type AppDispatch = AppStore[\"dispatch\"];\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { setupStore } from \"./store/store\";\n\nconst store = setupStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}