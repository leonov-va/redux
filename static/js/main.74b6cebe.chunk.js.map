{"version":3,"sources":["services/PostService.ts","components/PostItem.tsx","components/PostContainer.tsx","hooks/redux.ts","store/reducers/ActionCreators.ts","App.tsx","store/reducers/UserSlice.ts","store/store.ts","index.tsx"],"names":["postAPI","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","build","fetchAllPosts","query","limit","url","params","_limit","providesTags","result","createPost","mutation","post","method","body","invalidatesTags","updatePost","id","deletePost","PostItem","React","memo","props","remove","update","className","onClick","event","stopPropagation","title","window","prompt","type","PostContainer","useFetchAllPostsQuery","posts","data","isLoading","error","useCreatePostMutation","useUpdatePostMutation","useDeletePostMutation","handleCreate","a","handleRemove","handleUpdate","style","color","map","useAppSelector","useSelector","fetchUsers","createAsyncThunk","_","thunkAPI","axios","get","response","rejectWithValue","App","dispatch","useDispatch","state","userReducer","users","useEffect","JSON","parse","stringify","user","name","href","email","userSlice","createSlice","initialState","reducers","extraReducers","fulfilled","action","payload","pending","rejected","rootReducer","combineReducers","reducer","store","configureStore","middleware","getDefaultMiddleware","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.74b6cebe.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nimport { IPost } from \"../models/IPost\";\n\nexport const postAPI = createApi({\n  reducerPath: \"postAPI\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"http://localhost:5000\",\n  }),\n  tagTypes: [\"Post\"],\n  endpoints: (build) => ({\n    fetchAllPosts: build.query<IPost[], number>({\n      query: (limit: number = 5) => ({\n        url: `/posts`,\n        params: {\n          _limit: limit,\n        },\n      }),\n      providesTags: (result) => [\"Post\"],\n    }),\n    createPost: build.mutation<IPost, IPost>({\n      query: (post) => ({\n        url: `/posts`,\n        method: \"POST\",\n        body: post,\n      }),\n      invalidatesTags: [\"Post\"],\n    }),\n    updatePost: build.mutation<IPost, IPost>({\n      query: (post) => ({\n        url: `/posts/${post.id}`,\n        method: \"PUT\",\n        body: post,\n      }),\n      invalidatesTags: [\"Post\"],\n    }),\n    deletePost: build.mutation<IPost, IPost>({\n      query: (post) => ({\n        url: `/posts/${post.id}`,\n        method: \"DELETE\",\n      }),\n      invalidatesTags: [\"Post\"],\n    }),\n  }),\n});\n","import React from \"react\";\nimport { IPost } from \"../models/IPost\";\n\ninterface PostItemProps {\n  post: IPost;\n  remove: (post: IPost) => void;\n  update: (post: IPost) => void;\n}\n\nconst PostItem: React.FC<PostItemProps> = React.memo((props) => {\n  const { post, remove, update } = props;\n\n  const handleRemove = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    remove(post);\n  };\n\n  const handleUpdate = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    const title = window.prompt(\"Enter name: \", \"\") || \"\";\n\n    update({ ...post, title });\n  };\n\n  return (\n    <article className=\"post\" onClick={handleUpdate}>\n      <span className=\"post__id\">{post.id}</span>\n      <h2 className=\"post__name\">{post.title}</h2>\n      <p className=\"post__text\">{post.body}</p>\n      <button className=\"post__delete\" type=\"button\" onClick={handleRemove}>\n        Delete\n      </button>\n    </article>\n  );\n});\n\nexport default PostItem;\n","import React from \"react\";\nimport { IPost } from \"../models/IPost\";\nimport { postAPI } from \"../services/PostService\";\nimport PostItem from \"./PostItem\";\n\nconst PostContainer: React.FC = (props) => {\n  const { data: posts, isLoading, error } = postAPI.useFetchAllPostsQuery(100);\n  const [createPost, { error: createError, isLoading: isCreateLoading }] =\n    postAPI.useCreatePostMutation();\n  const [updatePost, {}] = postAPI.useUpdatePostMutation();\n  const [deletePost, {}] = postAPI.useDeletePostMutation();\n\n  const handleCreate = async () => {\n    const title = window.prompt(\"Enter name: \", \"\");\n\n    await createPost({\n      title,\n      body: title,\n    } as IPost);\n  };\n\n  const handleRemove = (post: IPost) => {\n    deletePost(post);\n  };\n\n  const handleUpdate = (post: IPost) => {\n    updatePost(post);\n  };\n\n  return (\n    <div className=\"posts\">\n      <button type=\"button\" onClick={handleCreate}>\n        Add new post\n      </button>\n\n      {isLoading && <h1>Loading....</h1>}\n      {error && <h1 style={{ color: \"red\" }}>{error}</h1>}\n\n      {posts?.map((post) => (\n        <PostItem\n          remove={handleRemove}\n          update={handleUpdate}\n          key={post.id}\n          post={post}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default PostContainer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch, RootState } from \"../store/store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { IUser } from \"../../models/IUser\";\n\n// export const fetchUsers = () => async (dispatch: AppDispatch) => {\n//   try {\n//     dispatch(userSlice.actions.usersFetching());\n//     const response = await axios.get<IUser[]>(\n//       \"https://jsonplaceholder.typicode.com/users\"\n//     );\n//     dispatch(userSlice.actions.usersFetchingSuccess(response.data));\n//   } catch (e: any) {\n//     dispatch(userSlice.actions.usersFetchingError(e.message));\n//   }\n// };\n\nexport const fetchUsers = createAsyncThunk(\n  \"user/fetchAll\",\n  async (_, thunkAPI) => {\n    try {\n      const response = await axios.get<IUser[]>(\n        \"https://jsonplaceholder.typicode.com/users\"\n      );\n      return response.data;\n    } catch (e: any) {\n      return thunkAPI.rejectWithValue(\"Failed to load users!\");\n    }\n  }\n);\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport PostContainer from \"./components/PostContainer\";\nimport { useAppDispatch, useAppSelector } from \"./hooks/redux\";\nimport { IUser } from \"./models/IUser\";\nimport { fetchUsers } from \"./store/reducers/ActionCreators\";\n\nfunction App() {\n  const dispatch = useAppDispatch();\n  const { users, isLoading, error } = useAppSelector(\n    (state) => state.userReducer\n  );\n\n  useEffect(() => {\n    dispatch(fetchUsers());\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Users</h1>\n      {isLoading && <h1>Loading....</h1>}\n      {error && <h1 style={{ color: \"red\" }}>{error}</h1>}\n      <div className=\"users\">\n        {JSON.parse(JSON.stringify(users, null, 2)).map((user: IUser) => (\n          <article className=\"user\" key={user.id}>\n            <h2 className=\"user__name\">{user.name}</h2>\n            <a className=\"user__email\" href={`mailto:${user.email}`}>\n              {user.email}\n            </a>\n          </article>\n        ))}\n      </div>\n\n      <h1>Posts</h1>\n      <PostContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import { fetchUsers } from \"./ActionCreators\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { IUser } from \"../../models/IUser\";\n\ninterface UserState {\n  users: IUser[];\n  isLoading: boolean;\n  error: string;\n}\n\nconst initialState: UserState = {\n  users: [],\n  isLoading: false,\n  error: \"\",\n};\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchUsers.fulfilled.type]: (state, action: PayloadAction<IUser[]>) => {\n      state.isLoading = false;\n      state.error = \"\";\n      state.users = action.payload;\n    },\n    [fetchUsers.pending.type]: (state) => {\n      state.isLoading = true;\n    },\n    [fetchUsers.rejected.type]: (state, action: PayloadAction<string>) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n  },\n});\n\nexport default userSlice.reducer;\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport { postAPI } from \"../services/PostService\";\nimport userReducer from \"./reducers/UserSlice\";\n\nconst rootReducer = combineReducers({\n  userReducer,\n  [postAPI.reducerPath]: postAPI.reducer,\n});\n\nexport const setupStore = () => {\n  return configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware().concat(postAPI.middleware),\n  });\n};\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppStore = ReturnType<typeof setupStore>;\nexport type AppDispatch = AppStore[\"dispatch\"];\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { setupStore } from \"./store/store\";\n\nconst store = setupStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}