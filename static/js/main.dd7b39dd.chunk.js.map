{"version":3,"sources":["hooks/redux.ts","store/reducers/ActionCreators.ts","App.tsx","store/reducers/UserSlice.ts","store/store.ts","index.tsx"],"names":["useAppSelector","useSelector","fetchUsers","createAsyncThunk","_","thunkAPI","a","axios","get","response","data","rejectWithValue","App","dispatch","useDispatch","state","userReducer","users","isLoading","error","useEffect","className","JSON","stringify","userSlice","createSlice","name","initialState","reducers","extraReducers","fulfilled","type","action","payload","pending","rejected","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"wMAKaA,G,MAAkDC,K,iDCWlDC,EAAaC,YACxB,gBADwC,uCAExC,WAAOC,EAAGC,GAAV,eAAAC,EAAA,+EAE2BC,IAAMC,IAC3B,8CAHN,cAEUC,EAFV,yBAKWA,EAASC,MALpB,yDAOWL,EAASM,gBAAgB,0BAPpC,yDAFwC,yD,OCQ3BC,I,EAAAA,EAnBf,WACE,IAAMC,EFH4BC,cEIlC,EAAoCd,GAClC,SAACe,GAAD,OAAWA,EAAMC,eADXC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UAAWC,EAA1B,EAA0BA,MAQ1B,OAJAC,qBAAU,WACRP,EAASX,OACR,IAGD,sBAAKmB,UAAU,MAAf,UACGH,GAAa,6CACbC,GAAS,6BAAKA,IACdG,KAAKC,UAAUN,EAAO,KAAM,O,sBCiBpBO,EApBUC,YAAY,CACnCC,KAAM,OACNC,aAR8B,CAC9BV,MAAO,GACPC,WAAW,EACXC,MAAO,IAMPS,SAAU,GACVC,eAAa,mBACV3B,EAAW4B,UAAUC,MAAO,SAAChB,EAAOiB,GACnCjB,EAAMG,WAAY,EAClBH,EAAMI,MAAQ,GACdJ,EAAME,MAAQe,EAAOC,WAJZ,cAMV/B,EAAWgC,QAAQH,MAAO,SAAChB,GAC1BA,EAAMG,WAAY,KAPT,cASVhB,EAAWiC,SAASJ,MAAO,SAAChB,EAAOiB,GAClCjB,EAAMG,WAAY,EAClBH,EAAMI,MAAQa,EAAOC,WAXZ,KAgBf,QCjCMG,EAAcC,YAAgB,CAClCrB,gBCGIsB,EDCGC,YAAe,CACpBC,QAASJ,ICAbK,IAASC,OACP,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFK,SAASC,eAAe,W","file":"static/js/main.dd7b39dd.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch, RootState } from \"../store/store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { IUser } from \"../../models/IUser\";\n\n// export const fetchUsers = () => async (dispatch: AppDispatch) => {\n//   try {\n//     dispatch(userSlice.actions.usersFetching());\n//     const response = await axios.get<IUser[]>(\n//       \"https://jsonplaceholder.typicode.com/users\"\n//     );\n//     dispatch(userSlice.actions.usersFetchingSuccess(response.data));\n//   } catch (e: any) {\n//     dispatch(userSlice.actions.usersFetchingError(e.message));\n//   }\n// };\n\nexport const fetchUsers = createAsyncThunk(\n  \"user/fetchAll\",\n  async (_, thunkAPI) => {\n    try {\n      const response = await axios.get<IUser[]>(\n        \"https://jsonplaceholder.typicode.com/users\"\n      );\n      return response.data;\n    } catch (e: any) {\n      return thunkAPI.rejectWithValue(\"Failed to load users!\");\n    }\n  }\n);\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport { useAppDispatch, useAppSelector } from \"./hooks/redux\";\nimport { fetchUsers } from \"./store/reducers/ActionCreators\";\n\nfunction App() {\n  const dispatch = useAppDispatch();\n  const { users, isLoading, error } = useAppSelector(\n    (state) => state.userReducer\n  );\n\n  useEffect(() => {\n    dispatch(fetchUsers());\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {isLoading && <h1>Loading....</h1>}\n      {error && <h1>{error}</h1>}\n      {JSON.stringify(users, null, 2)}\n    </div>\n  );\n}\n\nexport default App;\n","import { fetchUsers } from \"./ActionCreators\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { IUser } from \"../../models/IUser\";\n\ninterface UserState {\n  users: IUser[];\n  isLoading: boolean;\n  error: string;\n}\n\nconst initialState: UserState = {\n  users: [],\n  isLoading: false,\n  error: \"\",\n};\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchUsers.fulfilled.type]: (state, action: PayloadAction<IUser[]>) => {\n      state.isLoading = false;\n      state.error = \"\";\n      state.users = action.payload;\n    },\n    [fetchUsers.pending.type]: (state) => {\n      state.isLoading = true;\n    },\n    [fetchUsers.rejected.type]: (state, action: PayloadAction<string>) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n  },\n});\n\nexport default userSlice.reducer;\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport userReducer from \"./reducers/UserSlice\";\n\nconst rootReducer = combineReducers({\n  userReducer,\n});\n\nexport const setupStore = () => {\n  return configureStore({\n    reducer: rootReducer,\n  });\n};\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppStore = ReturnType<typeof setupStore>;\nexport type AppDispatch = AppStore[\"dispatch\"];\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { setupStore } from \"./store/store\";\n\nconst store = setupStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}